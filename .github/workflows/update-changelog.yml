name: Update Changelog and Docs from OCS PR

on:
  repository_dispatch:
    types: [ocs_changelog_update]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'OCS PR number'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write

jobs:
  update-changelog-and-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set variables from dispatch or manual input
        id: set_vars
        run: |
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            echo "pr_number=${{ github.event.client_payload.pr_number }}" >> $GITHUB_OUTPUT
            echo "pr_title=${{ github.event.client_payload.pr_title }}" >> $GITHUB_OUTPUT
            echo "pr_url=${{ github.event.client_payload.pr_url }}" >> $GITHUB_OUTPUT
            echo "pr_author=${{ github.event.client_payload.pr_author }}" >> $GITHUB_OUTPUT
            echo "pr_merged_at=${{ github.event.client_payload.pr_merged_at }}" >> $GITHUB_OUTPUT
            echo "pr_body=${{ toJSON(github.event.client_payload.pr_body) }}" >> $GITHUB_OUTPUT
            echo "pr_labels=${{ toJSON(github.event.client_payload.pr_labels) }}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
            # Fetch PR details using GitHub API
            PR_DATA=$(gh api repos/dimagi/open-chat-studio/pulls/${{ inputs.pr_number }})
            echo "pr_title=$(echo $PR_DATA | jq -r '.title')" >> $GITHUB_OUTPUT
            echo "pr_url=$(echo $PR_DATA | jq -r '.html_url')" >> $GITHUB_OUTPUT
            echo "pr_author=$(echo $PR_DATA | jq -r '.user.login')" >> $GITHUB_OUTPUT
            echo "pr_merged_at=$(echo $PR_DATA | jq -r '.merged_at')" >> $GITHUB_OUTPUT
            echo "pr_body=$(echo $PR_DATA | jq -r '.body')" >> $GITHUB_OUTPUT
            echo "pr_labels=$(echo $PR_DATA | jq -r '[.labels[].name]')" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.OCS_DOCS_PAT }}

      - name: Create branch for changelog update
        run: |
          BRANCH_NAME="changelog-pr-${{ steps.set_vars.outputs.pr_number }}-${{ github.run_number }}"
          git checkout -b $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create instruction file for Claude
        run: |
          cat > /tmp/claude_instructions.md << 'EOF'
          You need to update the changelog and documentation in this repository based on a merged PR from the open-chat-studio repository.

          ## PR Information
          - **PR Number:** #${{ steps.set_vars.outputs.pr_number }}
          - **PR Title:** ${{ steps.set_vars.outputs.pr_title }}
          - **PR URL:** ${{ steps.set_vars.outputs.pr_url }}
          - **Author:** ${{ steps.set_vars.outputs.pr_author }}
          - **Merged Date:** ${{ steps.set_vars.outputs.pr_merged_at }}
          - **Labels:** ${{ steps.set_vars.outputs.pr_labels }}

          ## PR Description
          ```
          ${{ steps.set_vars.outputs.pr_body }}
          ```

          ## Your Tasks

          ### Task 1: Update Changelog

          1. Read the current changelog at docs/changelog.md
          2. Analyze the PR title, description, and labels to understand what changed
          3. Determine the appropriate changelog type:
             - **NEW**: New features or functionality
             - **CHANGE**: Modifications to existing features
             - **BUG**: Bug fixes
             - **MIGRATION**: Migration-related changes or breaking changes
          4. Write a clear, concise changelog entry (1-2 sentences max)
          5. Add the entry to the changelog under the appropriate date section
          6. Format the merged date as "MMM D, YYYY" (e.g., "Oct 22, 2025")
          7. If a section for that date already exists, add to it; otherwise create a new date section

          **Changelog Format:**
          ```markdown
          ## [Date]
          * **[TYPE]** [Description]
          ```

          **Changelog Guidelines:**
          - Be concise but informative
          - Focus on user-facing changes
          - Use active voice (e.g., "Added support for..." not "Support was added for...")
          - Don't include internal implementation details unless they affect users
          - If the PR is purely internal/refactoring with no user impact, you can skip the changelog
          - Match the style and tone of existing changelog entries

          ### Task 2: Update Documentation

          After updating the changelog, analyze whether this PR requires documentation updates:

          1. **Check if documentation is needed:**
             - New features ‚Üí Need user guides, how-tos, or concept docs
             - API changes ‚Üí Update API documentation
             - Configuration changes ‚Üí Update setup/configuration docs
             - Behavior changes ‚Üí Update relevant user guides
             - Bug fixes ‚Üí Usually no docs needed unless it changes behavior
             - Internal/refactoring ‚Üí Skip documentation updates

          2. **If documentation IS needed:**
             - Use the Task tool with subagent_type="mkdocs-technical-writer" to handle the documentation updates
             - Provide the agent with:
               * What changed (from the PR)
               * What documentation needs to be created or updated
               * Context from the PR description
             - The agent will find the right place in the docs structure and update accordingly
             - Review the agent's output to ensure quality

          3. **If documentation is NOT needed:**
             - Simply skip this task and proceed to commit

          ### Task 3: Commit Changes

          After completing the above tasks, commit your changes with the message:
          "update changelog and docs from OCS PR #${{ steps.set_vars.outputs.pr_number }}"

          **IMPORTANT:** Do NOT create a pull request - just commit the changes to this branch. The workflow will create the PR.

          ## Important Guidelines

          - Focus on user-facing changes
          - Be clear and concise in both changelog and documentation
          - Match the style of existing content
          - If unsure whether docs are needed, err on the side of including them for NEW features
          - For CHANGE and BUG types, docs updates are usually optional unless behavior significantly changes
          EOF

      - name: Run Claude Code to generate changelog and update docs
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.OCS_DOCS_PAT }}
          prompt_file: /tmp/claude_instructions.md
          claude_args: |
            --allowedTools "Read,Write,Edit,Glob,Grep,Task,Bash(git add:*),Bash(git commit:*)"

      - name: Check for changes and push
        id: check_changes
        run: |
          if git diff --quiet origin/main; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes made by Claude"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT

            # Check what was changed
            CHANGELOG_CHANGED=$(git diff --name-only origin/main | grep -c "docs/changelog.md" || echo "0")
            DOCS_CHANGED=$(git diff --name-only origin/main | grep -v "docs/changelog.md" | grep -c "docs/" || echo "0")

            echo "changelog_changed=$CHANGELOG_CHANGED" >> $GITHUB_OUTPUT
            echo "docs_changed=$DOCS_CHANGED" >> $GITHUB_OUTPUT

            git push origin ${{ env.branch_name }}
          fi

      - name: Create Pull Request
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Determine PR title based on what changed
          if [ "${{ steps.check_changes.outputs.docs_changed }}" != "0" ]; then
            PR_TITLE="Update Changelog and Docs from OCS PR #${{ steps.set_vars.outputs.pr_number }}"
            CHANGES_DESC="Automated changelog and documentation updates"
          else
            PR_TITLE="Update Changelog from OCS PR #${{ steps.set_vars.outputs.pr_number }}"
            CHANGES_DESC="Automated changelog update"
          fi

          gh pr create \
            --title "$PR_TITLE" \
            --body "## Summary
          $CHANGES_DESC based on merged PR in open-chat-studio.

          **Source PR:** ${{ steps.set_vars.outputs.pr_url }}
          **PR Title:** ${{ steps.set_vars.outputs.pr_title }}
          **Author:** @${{ steps.set_vars.outputs.pr_author }}

          ### Changes Made
          - Changelog: ${{ steps.check_changes.outputs.changelog_changed == '1' && '‚úÖ Updated' || '‚è≠Ô∏è Skipped' }}
          - Documentation: ${{ steps.check_changes.outputs.docs_changed != '0' && '‚úÖ Updated' || '‚è≠Ô∏è No updates needed' }}

          ---
          ü§ñ This PR was automatically generated using Claude to analyze the source PR and update the changelog and documentation accordingly.

          @claude please review the changes for accuracy, completeness, and style." \
            --label "automated,changelog" \
            --assignee "${{ steps.set_vars.outputs.pr_author }}" \
            --base main \
            --head "${{ env.branch_name }}"
        env:
          GH_TOKEN: ${{ secrets.OCS_DOCS_PAT }}
